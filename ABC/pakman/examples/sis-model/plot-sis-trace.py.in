#!@PYTHON_EXECUTABLE@
import numpy as np
import matplotlib.pyplot as plt
from sys import argv, stderr, stdin

from argparse import ArgumentParser

# Process arguments
ap = ArgumentParser(description='Plot trace of SIS model')
ap.add_argument('Npop', type=int, help='total population')
ap.add_argument('-o', '--outputfile', help='file to save figure to',
                default = 'SIS_trace.png')
ap.add_argument('-t', '--tracefile', help='file to read S trace from (default: STDIN)',
                default = stdin)
ap.add_argument('-H', '--plotheight', type=float, help='upper bound on plotting height',
            default=None)
ap.add_argument('-W', '--plotwidth', type=float, help='upper bound on plotting width',
            default=None)
ap.add_argument('-b', '--bboxtight', action='store_true', help='make bbox around plot tight')
args = ap.parse_args()

Npop = args.Npop
plotheight = args.plotheight
plotwidth = args.plotwidth
bboxtight = args.bboxtight
outputfile = args.outputfile
tracefile = args.tracefile

# Read trace from tracefile
t_array = []
S_array = []

if type(tracefile) == str:
    tracefile = open(tracefile, 'r')

for line in tracefile:
    t, S = [ float(num) for num in line.split() ]
    t_array.append(t)
    S_array.append(S)

tracefile.close()

if not plotwidth is None:
    if t_array[-1] < plotwidth:
        t_array.append(plotwidth)
        S_array.append(S_array[-1])

t_array = np.array(t_array)
S_array = np.array(S_array)
I_array = Npop - S_array

# Plot trace
plt.figure()

plt.step(t_array, S_array, where='post', label='S')
plt.step(t_array, I_array, where='post', label='I')

plt.title("Trace of susceptible and infected populations in SIS model")
plt.xlabel("$t$")
plt.ylabel("Population count")

plt.legend()

# Set height
if plotheight != None:
    ylim = plt.ylim()
    plt.ylim([ylim[0], plotheight])
ylim = plt.ylim()
plt.ylim([0, ylim[1]])

# Set width
if plotwidth != None:
    xlim = plt.xlim()
    plt.xlim([xlim[0], plotwidth])
xlim = plt.xlim()
plt.xlim([0, xlim[1]])

# Save figure
plt.savefig(outputfile, bbox_inches='tight' if bboxtight else None)
plt.close()
