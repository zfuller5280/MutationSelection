#!/bin/bash
set -euo pipefail

# Process arguments
usage="Usage: $0 [num_procs] [num_simulations]"

# Check for help flag
if [ $# -ge 1 ]
then
    if [ $1 == "--help" ] || [ $1 == "-h" ]
    then
        echo $usage 1>&2
        exit 0
    fi
fi

# Print usage if too many arguments are given
if [ $# -gt 3 ]
then
    echo $usage 1>&2
    exit 1
fi

# Set number of parallel processes
if [ $# -ge 1 ]
then
    num_procs=$1
else
    num_procs=@cpu_count@
    mpi_num_procs=@MPIEXEC_MAX_NUMPROCS@
    if [ $mpi_num_procs -ne $num_procs ]
    then
        echo "Warning: the number of processors detected ($num_procs) may not correspond"
        echo "to the number of physical cores.  This may skew the scaling results."
        echo "If so, try running this script with the number of physical cores to"
        echo "get better results.  See '$0 --help' for instructions."
        echo
    fi
fi

# Set number of simulations to run
if [ $# -ge 2 ]
then
    num_simulations=$2
else
    num_simulations=128
fi

# Initialize timeformat so that time only outputs elapsed time in seconds
export TIMEFORMAT="%R"

# Initialize comma-separated file with the format:
# processes_count,elapsed_time
echo "num_processes,elapsed_time" > scaling.csv

# Run pakman rejection algorithm
current_num_procs=1
while [ "$current_num_procs" -le "$num_procs" ]
do
    # Print message
    echo "Running pakman with $current_num_procs processes..."

    # Write processes_count
    echo -n "$current_num_procs," >> scaling.csv

    # Run pakman and record elapsed time
    { time @MPIEXEC_EXECUTABLE@ @MPIEXEC_NUMPROC_FLAG@ $current_num_procs \
        @MPIEXEC_PREFLAGS@ \
        "@PROJECT_BINARY_DIR@/src/pakman" @MPIEXEC_POSTFLAGS@ mpi rejection \
        --verbosity=off \
        --number-accept=$num_simulations \
        --epsilon=0 \
        --parameter-names=p \
        --prior-sampler="echo 1" \
        --simulator="'@CMAKE_CURRENT_BINARY_DIR@/scaling-simulator.sh'" \
        > /dev/null 2>/dev/null; } 2>> scaling.csv

    # Show elapsed time
    echo -n "Finished in "
    tail -1 scaling.csv | cut -d, -f2 | tr -d '\n'
    echo " seconds"

    # Double number of processes
    ((current_num_procs *= 2))
done

# Print message
echo "Results were stored in scaling.csv"

echo "Printing scaling.csv..."
cat scaling.csv

# Create performance plot
if [ "@PYTHONINTERP_FOUND@" == "TRUE" ]
then
    @PYTHON_EXECUTABLE@ "@CMAKE_CURRENT_BINARY_DIR@/plot-scaling.py" scaling.csv speedup.png efficiency.png

    # Print message
    echo "Results were plotted in speedup.png and efficiency.png"
fi

